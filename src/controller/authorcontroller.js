let jwt = require('jsonwebtoken')//Import jwt
const authorModel = require('../Model/authorModel')//Import authorModel


//create Author 
const createAuthor = async function (req, res) {
    //using try catch block function
    try {
        //Reading inputs from req.body
        const authorData = req.body;
        //validate author
        const errors = await validateAuthor(authorData);
        if (errors.length > 0) {
            return res.status(400).send({ status: false, msg: "Mandatory fields are missing", errors: errors })
        }
        console.log("authorData1", authorData);

        // create author
        const author = await authorModel.create(authorData)

        //auto generate password if password is missing
        if (!authorData.password) {
            // <---Obviously copied from google----> //
            function password_generator(len) {
                let length = (len) ? (len) : (10);
                let string = "abcdefghijklmnopqrstuvwxyz"; //to upper 
                let numeric = '0123456789';
                let punctuation = '#?!@$%^&*-';//!@#$%^&*()_+~`|}{[]\:;?><,./-=
                let password = "";
                let character = "";
                while (password.length < length) {
                    entity1 = Math.ceil(string.length * Math.random() * Math.random());
                    entity2 = Math.ceil(numeric.length * Math.random() * Math.random());
                    entity3 = Math.ceil(punctuation.length * Math.random() * Math.random());
                    hold = string.charAt(entity1);
                    hold = (password.length % 2 == 0) ? (hold.toUpperCase()) : (hold);
                    character += hold;
                    character += numeric.charAt(entity2);
                    character += punctuation.charAt(entity3);
                    password = character;
                }
                password = password.split('').sort(function () { return 0.5 - Math.random() }).join('');
                return password.slice(0, len);
            }

            const random = password_generator()
            console.log(random)
            author.password = random

            //save autogenerated password in DB
            author.save()
            //send created author in response
            return res.status(201).send({ status: true, msg: author, alert: 'Save this password to login' })
        }

        //send created author in response
        res.status(201).send({ status: true, msg: author })

    }
    catch (error) {
        // return a error if any case fail on try block 
        res.status(500).send({ status: false, msg: error.message });
    }
}


const validateAuthor = async function (authorData) {
    const errors = [];
    //Mandotory fields
    if (!authorData.fname) {
        errors.push("first name required")
    }

    if (!authorData.lname) {
        errors.push("last name required")
    }

    if (!authorData.title) {
        errors.push("title name required")
    }

    if (!authorData.email) {
        errors.push("email is required")
    }

    // if (!authorData.password) {
    //     errors.push("Enter your own password or Save the autogenerated password after author creation")
    // }

    //email validation
    if (authorData.email) {
        let validmail = !/^\w+([\.-]?\w+)@\w+([\. -]?\w+)(\.\w{2,3})+$/.test(authorData.email)
        if (validmail) {
            errors.push("Invalid email")
        }
    }

    //password validation
    if (authorData.password) {
        let strongPassword = !/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$/.test(authorData.password)

        if (strongPassword) {
            errors.push("Create a strong password or leave it blank and save the auto generated password")
        }
    }

    if (errors.length === 0) {
        //unique email validation
        const userEmail = await authorModel.findOne({ email: authorData.email })
        //return a error if email already exist in authorModel
        if (userEmail) {
            errors.push("email already exist")
        }
    }
    return errors;
};

////////////////////////////////////////////////////////////////////////////////////////////////////

//login function
const loginauthor = async function (req, res) {
    try {
        //Reading email and password
        let username = req.body.email
        let password = req.body.password

         //check email format
       

         if (!username) {
             return res.status(400).send({ status: false, msg: "enter email" })
         }

        //check email format
        let validmail = !/^\w+([\.-]?\w+)@\w+([\. -]?\w+)(\.\w{2,3})+$/.test(username)

        if (validmail) {
            return res.status(400).send({ status: false, msg: "Invalid email" })
        }

        //Require password
        if (!password) {
            return res.status(400).send({ status: false, msg: "enter password" })
        }

        //find author with input credential
        let author = await authorModel.findOne({ email: username, password: password })
        if (!author) {
            return res.status(401).send({ status: false, msg: "Invalid credential" })
        }

        //Token generation with authorId and a secret key
        let token = jwt.sign({
            authorId: author._id.toString(),
            group: "40",
            Project: "Blog"
        }, "group40-phase2");
        
        res.send({ status: true, msg: token })

    } catch (error) {
        res.status(500).send({ status: false, msg: error.message })
    }

}

//Export function
module.exports.loginauthor = loginauthor
module.exports.createAuthor = createAuthor
